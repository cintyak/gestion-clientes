plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${springDependencyManagementVersion}"
    id 'com.gorylenko.gradle-git-properties' version "${gitPropertiesPluginVersion}"
    id 'com.google.cloud.tools.jib' version "${jibPluginVersion}"

    id "java"
    id "maven-publish"
    id "idea"
    id "eclipse"
}

group = "bo.com.bvb.gpgw.msaccount"
version = "0.0.4"
description = "Account Microservice"

sourceCompatibility = 1.8
targetCompatibility = 1.8

apply from: "gradle/git.gradle"

if (project.hasProperty("prod")) {
    apply from: "gradle/profile_prod.gradle"
} else {
    apply from: "gradle/profile_dev.gradle"
}
if (project.hasProperty("registry-prod")) {
    apply from: "gradle/docker_prod.gradle"
} else {
    apply from: "gradle/docker.gradle"
}


if (project.hasProperty("war")) {
    apply from: "gradle/war.gradle"
}

defaultTasks "bootRun"
bootRun {
    if (project.hasProperty("jvmArgs")) {
        jvmArgs = (project.jvmArgs.split("\\s+") as List)
    }
}

eclipse {
    sourceSets {
        main {
            java {
                srcDirs += ["build/generated/sources/annotationProcessor/java/main"]
            }
        }
    }
}

springBoot {
    mainClass = "bo.com.bisa.gpgw.msaccount.MsAccountApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    //reports.html.enabled = false
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Execute integration tests."
    group = "verification"
    include "**/*IT*", "**/*IntTest*"

    testLogging {
        events 'FAILED', 'SKIPPED'
    }

    if (project.hasProperty('testcontainers')) {
        environment 'spring.profiles.active', 'testcontainers'
    }

    // uncomment if the tests reports are not generated
    // see https://github.com/jhipster/generator-jhipster/pull/2771 and https://github.com/jhipster/generator-jhipster/pull/4484
    // ignoreFailures true
    //reports.html.enabled = false
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn test
}

task integrationTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/tests")
    reportOn integrationTest
}

if (!project.hasProperty("runList")) {
    project.ext.runList = "main"
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    // Common libs
    implementation "bo.com.bisa.gpgw:gpgw-common:1.0.0"
    // Springframework
    implementation("org.springframework.boot:spring-boot-starter-web") {
        exclude module: "spring-boot-starter-tomcat"
    }
    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"
    implementation "org.springframework.boot:spring-boot-starter-undertow"
    implementation "org.springframework.boot:spring-boot-starter-thymeleaf"
    implementation "org.springframework.boot:spring-boot-starter-security"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
    // Spring security
    implementation "org.springframework.security:spring-security-data"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.security:spring-security-config"
    // Zalando
    implementation "org.zalando:problem-spring-web:${problemSpringVersion}"
    // Jackson
    implementation "com.fasterxml.jackson.core:jackson-annotations"
    implementation "com.fasterxml.jackson.core:jackson-databind"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hppc"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-hibernate5"
    implementation "com.fasterxml.jackson.module:jackson-module-jaxb-annotations"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    // Liquibase
    implementation "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
    // Hibernate
    implementation "org.hibernate:hibernate-core"
    implementation "org.hibernate:hibernate-entitymanager"
    implementation "org.hibernate.validator:hibernate-validator"
    annotationProcessor "org.hibernate:hibernate-jpamodelgen:${hibernateVersion}"
    // Datasource
    implementation "com.zaxxer:HikariCP"
    implementation "org.postgresql:postgresql"
    implementation "javax.annotation:javax.annotation-api"
    implementation "javax.transaction:javax.transaction-api"
    implementation "javax.cache:cache-api"
    // JWT
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    // Lombok
    implementation "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    // Apache Tools
    implementation "org.apache.commons:commons-lang3"
    // Swagger SpringFox
    implementation "io.springfox:springfox-swagger2:${springfoxVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springfoxVersion}"

    // Test libs
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.security:spring-security-test"
    testImplementation "org.springframework.boot:spring-boot-test"
    testImplementation "com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}"
    testRuntimeOnly "com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}"
    testImplementation "com.h2database:h2"
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

wrapper {
    gradleVersion = "7.6"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
